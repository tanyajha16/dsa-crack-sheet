LONGEST INCREASING SUBSEQUENCE UDSING DYNAMIC PROGRAMMING

#include <iostream>
using namespace std;

int lis(int *input,int n)
{
    int i,j;
    int *output=new int[n];
    // first element has subsequence 1
    output[0]=1;
    for(i=1;i<n;i++)
    {
        // putting each element of output array as 1 
        output[i]=1;
        for(j=i-1;j>=0;j--)
        {
          if(input[j]>input[i])
             continue;
          else
          {
            //   length of previous subsequences + 1 for the element also
              int positionans=output[j]+1;
              if(positionans > output[i])
                output[i]=positionans;
          }
        }
    }
    int bestans=0;
    for(i=0;i<n;i++)
    {
        if(output[i]>bestans)
          bestans=output[i];
    }
    delete[] output;
    return bestans;
}

int main()
{
    int n,i;
    cin>>n;
    int *input=new int[n];
    for(i=0;i<n;i++)
    {
        cin>>input[i];
    }
    int ans=lis(input,n);
    cout<<ans<<endl;
    delete[] input;
}
