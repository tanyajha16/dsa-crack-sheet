You are given an array of positive integers as input. Write a code to return the length of the largest such subsequence in which the values are arranged first in strictly ascending order and then in strictly descending order.
Such a subsequence is known as bitonic subsequence. A purely increasing or purely decreasing subsequence will also be considered as a bitonic sequence with the other part empty.
Note that the elements in bitonic subsequence need not be consecutive in the given array but the order should remain same.
Input Format:
Line 1 : A positive Integer N, i.e., the size of array
Line 2 : N space-separated integers as elements of the array 
Output Format:
Length of Largest Bitonic subsequence
Input Constraints:
1<= N <= 100000
Sample Input 1:
6
15 20 20 6 4 2
Sample Output 1:
5
Sample Output 1 Explanation:
Here, longest Bitonic subsequence is {15, 20, 6, 4, 2} which has length = 5.
Sample Input 2:
2
1 5
Sample Output 2:
2
Sample Input 3:
2
5 1
Sample Output 3:
2


#include<cmath>
int bitoic(int *input,int n)
{
    int i,j;
    int *output=new int[n];
    int *output1=new int [n];
    // first element has subsequence 1
    output[0]=1;
    output1[0]=1;
    for(i=1;i<n;i++)
    {
        // putting each element of output array as 1 
        output[i]=1;
        for(j=i-1;j>=0;j--)
        {
          if(input[j]>=input[i])
             continue;
          else
          {
            //   length of previous subsequences + 1 for the element also
              int positionans=output[j]+1;
              if(positionans > output[i])
                output[i]=positionans;
          }
        }
    }
    for(i=n-1;i>=0;i--)
    {
        // putting each element of output array as 1 
        output1[i]=1;
         for(j=i+1;j<n;j++)
        {
          if(input[j]>=input[i])
             continue;
          else
          {
            //   length of previous subsequences + 1 for the element also
              int positionans1=output1[j]+1;
              if(positionans1 > output1[i])
                output1[i]=positionans1;
          }
        }
    }
    int bestans=0;
    for(i=0;i<n;i++)
    {
        if((output1[i]+output[i]-1)>bestans)
          bestans=output1[i]+output[i]-1;
    }
    delete[] output1;
    delete[] output;
    return bestans;
}


int longestBitonicSubarray(int *input, int n) {
   int ans=bitoic(input,n);
    return ans;
}


