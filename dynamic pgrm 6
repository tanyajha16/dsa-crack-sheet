You are given an infinite supply of coins of each of denominations D = {D0, D1, D2, D3, ...... Dn-1}. You need to figure out the total number of ways W, in which you can make change for Value V using coins of denominations D.
Note : Return 0, if change isn't possible.
Input Format
Line 1 : Integer n i.e. total number of denominations
Line 2 : N integers i.e. n denomination values
Line 3 : Value V
Output Format
Line 1 :  Number of ways i.e. W
Constraints :
1<=n<=10
1<=V<=1000
Sample Input 1 :
3
1 2 3
4
Sample Output
4
Sample Output Explanation :
Number of ways are - 4 total i.e. (1,1,1,1), (1,1, 2), (1, 3) and (2, 2).



 int coinschange(int n,int *d,int size,int **output)
 {
     if(n==0)
       return 1;
     if(size==0)
       return 0;
     if (n<0)
       return 0;
     if(output[size][n] > 0)
     {
         return output[size][n];
     }
    int ans1=coinschange(n-d[0],d,size,output);
    int ans2=coinschange(n,d+1,size-1,output);
    output[size][n]=ans1+ans2;
    return ans1+ans2;
 }
int countWaysToMakeChange(int denominations[], int numDenominations, int value)
{
    int **temp = new int* [numDenominations+1];
    
        for (int i = 0; i < numDenominations+1; i++)
        {
            temp[i]=new int[value+1];
            for (int j = 0; j < value+1; j++)
              {
            temp[i][j] = 0;
        }
    }
    int ans = coinschange(value,denominations,numDenominations,temp);
    // for (int i = 0; i < numDenominations+1; i++)
    //     {
    //         for (int j = 0; j < value+1; j++)
    //           {
    //     delete[] temp[i][j];
    // }
    delete[] temp;
    return ans;
 
 }

 

